{"version":3,"file":"resourceLoader.min.js","sources":["dest/resourceLoader.nodebug.js"],"names":["window","resourceLoader","ResourceLoader","header","loaded","callbacks","defaults","regexpCss","regexpJs","document","getElementsByTagName","documentElement","appendElement","type","attributes","callback","element","createElement","readyState","onreadystatechange","onload","i","appendChild","loadInSerial","args","arguments","length","this","Function","that","apply","slice","call","loadInParallel","url","Array","loadResource","push","match","loadCss","loadJs","undefined","originalCb","cb","src","rel","href","prototype","load","config","options","name","value"],"mappings":";;;;;;CAOA,SAAUA,GACN,IAAIA,EAAOC,eAAe,CAMtB,GAAIC,GAAiB,WAOjB,GAAIC,GAOAC,KAOAC,KAOAC,GACAC,UAAW,iBACXC,SAAU,gBASVN,EAAiB,WACjBC,EAAUM,SAASC,qBAAqB,QAAQ,IAAMD,SAASE,iBAY/DC,EAAgB,SAASC,EAAMC,EAAYC,GAE3C,GAAIC,GAAUP,SAASQ,cAAcJ,EACjCE,KACIC,EAAQE,WACRF,EAAQG,mBAAqB,YACE,WAAvBH,EAAQE,YAAkD,aAAvBF,EAAQE,cAC3CF,EAAQG,mBAAqB,KAC7BJ,MAIRC,EAAQI,OAASL,EAGzB,KAAK,GAAIM,KAAKP,GACVA,EAAWO,KAAOL,EAAQK,GAAKP,EAAWO,GAG9ClB,GAAOmB,YAAYN,IAkBnBO,EAAe,WAGf,GAAIC,GAAOC,UACPC,EAASF,EAAKE,MAClB,IAAe,IAAXA,EACA,MAAOC,KACJ,IAAe,IAAXD,GAAgBF,EAAK,YAAcI,UAE1C,MADAJ,GAAK,KACEG,IAEX,IAAIZ,EACJ,IAAIW,EAAS,EAAG,CACZ,GAAIG,GAAOF,IACXZ,GAAW,WACPQ,EAAaO,MACTD,KACGE,MAAMC,KAAKR,EAAM,KAOhC,MAJAS,GAAeD,KACXL,KACAH,EAAK,GACLT,GACGY,MAWPM,EAAiB,SAASC,EAAKnB,GAI/B,GAAImB,YAAeC,OAAO,CAEtB,IAAK,GAAId,GAAI,EAAGA,EAAIa,EAAIR,OAAQL,IAC5Be,EAAaF,EAAIb,GAErBN,IAAYmB,EAAIG,KAAKtB,GAErBQ,EAAaO,MAAMH,KAAMO,OAEzBE,GAAaF,EAAKnB,IAYtBqB,EAAe,SAASF,EAAKnB,GAIzBmB,EAAII,MAAMhC,EAASC,WACnBgC,EAAQL,EAAKnB,GACNmB,EAAII,MAAMhC,EAASE,WAC1BgC,EAAON,EAAKnB,IAYhByB,EAAS,SAASN,EAAKnB,GAKnBX,EAAO8B,MAAS,EAEhBnB,GAAYA,IACc0B,SAAnBpC,EAAU6B,GAGbnB,IACAV,EAAU6B,GAAO,SAAUQ,EAAYC,GACnC,MAAO,YAEHD,IAEAC,MAELtC,EAAU6B,GAAMnB,KAIvBV,EAAU6B,GAAO,SAAUS,GACvB,MAAO,YACHvC,EAAO8B,IAAO,EACdS,GAAMA,MAEX5B,GACHH,EACI,UAEIC,KAAM,kBACN+B,IAAKV,GAET,WACI7B,EAAU6B,SAatBK,EAAU,SAASL,EAAKnB,GAIpBX,EAAO8B,MAAS,GAChBtB,EACI,QAEIC,KAAM,WACNgC,IAAI,aACJC,KAAMZ,IAGlB9B,EAAO8B,IAAO,EACdnB,GAAYA,IAgDhB,OA/BAb,GAAe6C,UAAUC,KAAO,WAM5B,MAHAzB,GAAaO,MACTH,KACAF,WACGE,MAUXzB,EAAe6C,UAAUE,OAAS,SAASC,GAEvC,GAAIA,EACA,IAAKC,OAAQD,GACTE,MAAQF,EAAQC,MACZC,QAEA9C,EAAS6C,MAAQC,MAK7B,OAAOzB,OAGJzB,IAGXF,GAAOC,eAAiB,GAAIC,KAEjCF","sourcesContent":["/*!\n * resourceLoader v1.0.0 *\n *\n * Copyright (c) 2015 @toyoty99.\n * Licensed under the MIT license.\n */\n\n(function(window){\n    if(!window.resourceLoader){\n        /**\n         * ResourceLoader class\n         *\n         * @class ResourceLoader\n         */\n        var ResourceLoader = (function() {\n            /**\n             * header element (or document element)\n             *\n             * @property header\n             * @type Object\n             */\n            var header;\n            /**\n             * a map of whether resource is loaded or not\n             *\n             * @property loaded\n             * @type Object\n             */\n            var loaded ={};\n            /**\n             * a map of callbacks whick will be invoked when resource is loaded\n             *\n             * @property callbacks\n             * @type Object\n             */\n            var callbacks ={};\n            /**\n             * default options\n             *\n             * @property defaults\n             * @type Object\n             */\n            var defaults ={\n                regexpCss: /\\.css\\b|_css\\b/,\n                regexpJs: /\\.js\\b|_js\\b/\n            };\n\n            /**\n             * constructor\n             *\n             * @class ResourceLoader\n             * @constructor\n             */\n            var ResourceLoader = function() {\n                header  = document.getElementsByTagName(\"head\")[0] || document.documentElement;\n            };\n\n            /**\n             * add new element to header\n             *\n             * @method appendElement\n             * @private\n             * @param  {String}   type       a type of element\n             * @param  {Object}   attributes attributes of element\n             * @param  {Function} callback   callback function whick will be invoked when element is loaded\n             */\n            var appendElement = function(type, attributes, callback) {\n                \n                var element = document.createElement(type);\n                if (callback) {\n                    if (element.readyState) {\n                        element.onreadystatechange = function() {\n                            if (element.readyState === \"loaded\" || element.readyState === \"complete\") {\n                                element.onreadystatechange = null;\n                                callback();\n                            }\n                        };\n                    } else {\n                        element.onload = callback;\n                    }\n                }\n                for (var i in attributes) {\n                    attributes[i] && (element[i] = attributes[i]);\n                }\n                \n                header.appendChild(element);\n            };\n\n            /**\n             * load resources in serial\n             *\n             * arguments is supposed as follows:<br/>\n             *   [\"url1\", \"url2\", ... \"urlN\", callback]<br/>\n             *      or<br/>\n             *   [[\"url1\", \"url2\", ... \"urlN\"], callback]<br/>\n             *      or<br/>\n             *   combination of the above<br/>\n             *\n             * @method load\n             * @private\n             * @param {Object} ...urlAndCallback resource urls and callback\n             * @return the instance of loader\n             */\n            var loadInSerial = function(){\n                \n                \n                var args = arguments;\n                var length = args.length;\n                if (length === 0) {\n                    return this;\n                } else if (length === 1 && args[0] instanceof Function) {\n                    args[0]();\n                    return this;\n                }\n                var callback;\n                if (length > 1) {\n                    var that = this;\n                    callback = function(){\n                        loadInSerial.apply(\n                            that,\n                            [].slice.call(args, 1));\n                    };\n                }\n                loadInParallel.call(\n                    this,\n                    args[0],\n                    callback);\n                return this;\n            };\n\n            /**\n             * load resources in parallel\n             *\n             * @method loadInParallel\n             * @private\n             * @param  {String|Array}  url url(s) of resource\n             * @param  {Function} callback callback function whick will be invoked when resource is loaded\n             */\n            var loadInParallel = function(url, callback){\n                \n                \n                \n                if (url instanceof Array) {\n                    // load in parallel\n                    for (var i = 0; i < url.length; i++) {\n                        loadResource(url[i]);\n                    }\n                    callback && url.push(callback);\n                    // invoke callback-chain to ensure that all resources are loaded\n                    loadInSerial.apply(this, url);\n                } else {\n                    loadResource(url, callback);\n                }\n            };\n\n            /**\n             * load resource\n             *\n             * @method loadResource\n             * @private\n             * @param  {String}   url      url of resource\n             * @param  {Function} callback callback function whick will be invoked when resource is loaded\n             */\n            var loadResource = function(url, callback){\n                \n                \n                \n                if (url.match(defaults.regexpCss)) {\n                    loadCss(url, callback);\n                } else if (url.match(defaults.regexpJs)) {\n                    loadJs(url, callback);\n                }\n            };\n\n            /**\n             * load JavaScript\n             *\n             * @method loadJs\n             * @private\n             * @param  {String}   url      url of JavaScript\n             * @param  {Function} callback callback function whick will be invoked when resource is loaded\n             */\n            var loadJs = function(url, callback){\n                \n                \n                \n                \n                if (loaded[url] === true ) {\n                    // already loaded\n                    callback && callback();\n                } else if (callbacks[url] !== undefined) {\n                    // callbacks[url] is already registered\n                    // (secandary or nth asking for loading the script)\n                    if (callback) {\n                        callbacks[url] = (function(originalCb, cb){\n                            return function(){\n                                // original callback function\n                                originalCb();\n                                // additional callback function\n                                cb();\n                            };\n                        })(callbacks[url], callback);\n                    }\n                } else {\n                    // first asking for loading the script\n                    callbacks[url] = (function(cb){\n                        return function() {\n                            loaded[url] = true;\n                            cb && cb();\n                        };\n                    })(callback);\n                    appendElement(\n                        \"script\",\n                        {\n                            type: \"text/javascript\",\n                            src: url\n                        },\n                        function() {\n                            callbacks[url]();\n                        });\n                }\n            };\n\n            /**\n             * load Style Sheet\n             *\n             * @method loadCss\n             * @private\n             * @param  {String}   url      url of Style Sheet\n             * @param  {Function} callback callback function whick will be invoked when resource is loaded\n             */\n            var loadCss = function(url, callback){\n                \n                \n                \n                if (loaded[url] !== true ) {\n                    appendElement(\n                        \"link\",\n                        {\n                            type: \"text/css\",\n                            rel:\"stylesheet\",\n                            href: url\n                        });\n                }\n                loaded[url] = true;\n                callback && callback();\n            };\n\n            /**\n             * load resources\n             *\n             * arguments is supposed as follows:<br/>\n             *   [\"url1\", \"url2\", ... \"urlN\", callback]<br/>\n             *      or<br/>\n             *   [[\"url1\", \"url2\", ... \"urlN\"], callback]<br/>\n             *      or<br/>\n             *   combination of the above\n             *\n             * @method load\n             * @param {Object} ...urlAndCallback resource urls and callback\n             * @return the instance of loader\n             */\n            ResourceLoader.prototype.load = function(){\n                \n                \n                loadInSerial.apply(\n                    this,\n                    arguments);\n                return this;\n            };\n\n            /**\n             * configure loader\n             *\n             * @method config\n             * @param  {Object} options ResourceLoader options\n             * @return the instance of loader\n             */\n            ResourceLoader.prototype.config = function(options){\n                \n                if (options) {\n                    for (name in options) {\n                        value = options[name];\n                        if (value) {\n                            // shallow copy\n                            defaults[name] = value;\n                        }\n                    }\n                }\n                \n                return this;\n            };\n\n            return ResourceLoader;\n        })();\n\n        window.resourceLoader = new ResourceLoader();\n    }\n})(window);\n"]}